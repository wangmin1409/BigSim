# Controls
%active Greater : 2;
%active Less : 2;
%active GreaterOrEqual : 2;
%active LessOrEqual : 2;
%active Equal : 2;
%active NotEqual : 2;
%active Operator : 2;
%active Fixture : 1;
%passive DSoftSys : 2;
%passive Slot : 0;
%active Aggregator : 2;
%active CoAP_Server : 0;
%passive RaspberryPi : 3;
%passive BLE : 2;
%passive Bus : 1;
%active LED : 1;
%active SlotInfo : 0;
%active Lighten : 0;
%active Token : 0;
%active rightR : 1;
%active SearchCondition : 2;
%active SearchResult : 2;
%active WebUI : 0;
%active DB : 1;
%active Jig : 1;
%active right : 1;
%active wrong : 1;
%active damaged : 1;


# Rules
%rule r_operator_input_right_search_condition Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI | Aggregator[idle,idle] | DB[idle]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle,rc:edge].right[rc:edge] | Aggregator[idle,idle] | DB[idle]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1{SysClk:1	Cond:aggregator.flag==0	Expr:webUI.searchCondition='right'};

%rule r_aggregator_connectdb_suc Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle,rc:edge].right[rc:edge] | Aggregator[idle,idle] | DB[idle]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle,rc:edge].right[rc:edge] | Aggregator[connect:edge,idle] | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1{SysClk:1	Expr:aggregator.connectdb='true'};

%rule r_aggregator_connectdb_right_result Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle,rc:edge].right[rc:edge] | Aggregator[connect:edge,idle] | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge,rc:edge].right[rc:edge] | Aggregator[connect:edge,idle].SearchResult[match:edge,isR:edge].rightR[isR:edge] | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1{SysClk:1	Cond:webUI.searchCondition=='right',aggregator.connectdb=='true'	Expr:aggregator.searchMatched='true',aggregator.searchResult='true',operator.committed='false'};

%rule r_operator_choose_and_commit Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge,rc:edge].right[rc:edge] | Aggregator[connect:edge,idle].SearchResult[match:edge,isR:edge].rightR[isR:edge] | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge,rc:edge].right[rc:edge] | Aggregator[connect:edge,idle].(SearchResult[match:edge,isR:edge].rightR[isR:edge] | SlotInfo) | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1{SysClk:1	Cond:aggregator.searchMatched=='true',aggregator.searchResult=='true',aggregator.aggregatorReceived=='false'	Expr:operator.committed='true',aggregator.flag=1,aggregator.aggregatorReceived='true',aggregator.slotInfo='A11006'};

%rule r_aggregator_call_coapserver Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(Aggregator[connect:edge,idle].(SlotInfo | $0) | DB[connect:edge] | $2) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].CoAP_Server | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].(Aggregator[connect:edge,idle].$0 | DB[connect:edge] | $2) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].CoAP_Server.SlotInfo | BLE[Bluetooth:edge,idle].$1{SysClk:1	Cond:aggregator.flag==1,aggregator.aggregatorReceived=='true',coap.CoAPReceived=='false'	Expr:coap.CoAPReceived='true'};

%rule r_coapserver_call_ble Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].CoAP_Server.SlotInfo | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].CoAP_Server | BLE[Bluetooth:edge,idle].($1 | SlotInfo){SysClk:1	Cond:aggregator.flag==1,coap.CoAPReceived=='true',ble.BLEReceived=='false'	Expr:ble.BLEReceived='true'};

%rule r_ble_call_bus Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].(SlotInfo | Bus[idle].$2) <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].($2 | SlotInfo){SysClk:1	Cond:aggregator.flag==1,ble.BLEReceived=='true',bus.busReceived=='false'	Expr:bus.busReceived='true'};

%rule r_bus_light_led Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(SlotInfo | LED[idle] | $2) <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle].Lighten | $2){SysClk:1	Cond:aggregator.flag==1,bus.busReceived=='true',aggregator.LEDLighten=='false'	Expr:aggregator.LEDLighten='true'};

%rule r_operator_find_slot Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle].Lighten | Slot.Jig[idle] | $2) <- DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle].Lighten | Slot.Jig[idle] | $2 | Operator[idle,idle]){SysClk:1	Cond:aggregator.flag==1,aggregator.LEDLighten=='true',operator.findSlot=='false'	Expr:operator.findSlot='true'};

%rule r_operator_getJig_and_lightoff DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle].Lighten | Slot.Jig[idle] | Operator[idle,idle] | $2) <- DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle] | Slot | Operator[idle,take:edge].Jig[take:edge] | $2){SysClk:1	Cond:aggregator.flag==1,operator.findSlot=='true',aggregator.LEDLighten=='true',led.damaged=='false'	Expr:operator.getJig='true',aggregator.LEDLighten='false'};

%rule r_operator_leave_slot DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle] | Slot | Operator[idle,take:edge].Jig[take:edge] | $2) <- DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$1 | BLE[Bluetooth:edge,idle].Bus[idle].(LED[idle] | Slot | $2) | Operator[operate:edge,take:edge].Jig[take:edge]{SysClk:1	Cond:aggregator.flag==1,operator.getJig=='true',aggregator.LEDLighten=='false',operator.leaveSlot=='false'	Expr:operator.leaveSlot='true'};

%rule r_operator_finish_operation DSoftSys[operate:edge,WIFI:edge].(WebUI.$2 | Aggregator[connect:edge,idle].$3 | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 | Operator[operate:edge,take:edge].Jig[take:edge] <- DSoftSys[operate:edge,WIFI:edge].(WebUI.($2 | Token) | Aggregator[connect:edge,idle].$3 | DB[connect:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$0 | BLE[Bluetooth:edge,idle].$1 | Operator[operate:edge,take:edge].Jig[take:edge]{SysClk:1	Cond:aggregator.flag==1,operator.getJig=='true',aggregator.LEDLighten=='false'	Expr:aggregator.flag=0,aggregator.finished='true',aggregator.slotInfo='null'};

%rule r_breaken_bluetooth Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge,idle].$2 | BLE[Bluetooth:edge,idle].$1 <- Operator[operate:edge,idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,idle,idle].$2 | BLE[idle,idle].$1{SysClk:1	Expr:bluetooth.connected='false'};

#%error RaspberryPi[WIFI:edge,idle,idle] | BLE[idle,idle];

# error state Back Derivation Start
%agent ble:BLE[idle,idle].bus:Bus[idle].(n01:LED[idle].nil|n02:LED[idle].nil|n03:LED[idle].nil|n04:LED[idle].nil|n05:LED[idle].nil|n06:LED[idle].nil|n07:LED[idle].nil|n08:LED[idle].nil|n09:LED[idle].nil|n10:LED[idle].Lighten.nil|s01:Slot.g1:Jig[idle].nil|s02:Slot.g2:Jig[idle].nil|s03:Slot.g3:Jig[idle].nil|s04:Slot.g4:Jig[idle].nil|s05:Slot.g5:Jig[idle].nil|s06:Slot.g6:Jig[idle].nil|s07:Slot.g7:Jig[idle].nil|s08:Slot.g8:Jig[take:edge].nil|s09:Slot.g9:Jig[idle].nil|s10:Slot.g10:Jig[idle].nil)|dsoftsys:DSoftSys[operate:edge,WIFI:edge].(aggregator:Aggregator[connect:edge,idle].SearchResult[match:edge,isR:edge].rightR[isR:edge].nil|db:DB[connect:edge].nil|webUI:WebUI.SearchCondition[match:edge,rc:edge].right[rc:edge].nil)|operator:Operator[operate:edge,idle].nil|ras:RaspberryPi[WIFI:edge,idle,idle].coap:CoAP_Server.nil;

# Go!
%check;
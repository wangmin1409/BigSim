# Controls
%active Greater : 2;
%active Less : 2;
%active GreaterOrEqual : 2;
%active LessOrEqual : 2;
%active Equal : 2;
%active NotEqual : 2;
%active Operator : 1;
%active Fixture : 1;
%passive DSoftSys : 2;
%passive Slot : 1;
%active Aggregator : 1;
%active CoAP_Server : 0;
%passive RaspberryPi : 2;
%passive BLE : 1;
%passive Bus : 0;
%active LED : 0;
%active SlotInfo : 0;
%active Lighten : 0;
%active Token : 0;
%active SearchCondition : 1;
%active SearchResult : 1;
%active WebUI : 0;
%active DB : 1;

# Rules

%rule r_return_operator_input_search_condition Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI | Aggregator[search:edge] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle] | Aggregator[search:edge] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1{SysClk:1	React:Aggregator	Cond:Aggregator.flag==0,webUI.searchCondition=='false'	Expr:webUI.searchCondition='true'};

%rule r_return_aggregator_search_db Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle] | Aggregator[search:edge] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle] | Aggregator[search:edge].SearchResult[idle] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1{SysClk:1	Cond:webUI.searchCondition=='true',aggregator.searchDB=='false'	Expr:aggregator.searchDB='true'};

%rule r_return_searchcondition_match_searchresult Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[idle] | Aggregator[search:edge].SearchResult[idle] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge] | Aggregator[search:edge].SearchResult[match:edge] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1{SysClk:1	Cond:aggregator.searchDB=='true',aggregator.searchMatched=='false'	Expr:aggregator.searchMatched='true'};

%rule r_return_operator_choose_and_commit Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge] | Aggregator[search:edge].SearchResult[match:edge] | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(WebUI.SearchCondition[match:edge] | Aggregator[search:edge].(SearchResult[match:edge] | SlotInfo) | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1{SysClk:1	Cond:aggregator.searchMatched=='true',operator.committed=='false'	Expr:operator.committed='true',aggregator.flag=1,aggregator.aggregatorReceived='true'};

%rule r_return_aggregator_call_coapserver Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(Aggregator[search:edge].(SlotInfo | $0) | DB[search:edge] | $2) | RaspberryPi[WIFI:edge,Bluetooth:edge].CoAP_Server | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].(Aggregator[search:edge].$0 | DB[search:edge] | $2) | RaspberryPi[WIFI:edge,Bluetooth:edge].CoAP_Server.SlotInfo | BLE[Bluetooth:edge].$1{SysClk:1	Cond:aggregator.flag==1,aggregator.aggregatorReceived=='true',coap.CoAPReceived=='false'	Expr:coap.CoAPReceived='true'};

%rule r_return_coapserver_call_ble Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].CoAP_Server.SlotInfo | BLE[Bluetooth:edge].$1 -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].CoAP_Server | BLE[Bluetooth:edge].($1 | SlotInfo){SysClk:1	Cond:aggregator.flag==1,coap.CoAPReceived=='true',ble.BLEReceived=='false'	Expr:ble.BLEReceived='true'};

%rule r_return_ble_call_bus Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].(SlotInfo | Bus.$2) -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.($2 | SlotInfo){SysClk:1	Cond:aggregator.flag==1,ble.BLEReceived=='true',bus.busReceived=='false'	Expr:bus.busReceived='true'};

%rule r_return_bus_light_led Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED | SlotInfo | $2) -> Operator[operate:edge].Fixture[idle] | DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED.Lighten | $2){SysClk:1	Cond:aggregator.flag==1,bus.busReceived=='true',aggregator.LEDLighten=='false'	Expr:aggregator.LEDLighten='true'};

%rule r_return_operator_find_slot DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED.Lighten | Slot[idle] | $2) | Operator[operate:edge].Fixture[idle] -> DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED.Lighten | Slot[idle] | $2 | Operator[idle].Fixture[idle]){SysClk:1	Cond:aggregator.flag==1,aggregator.LEDLighten=='true',operator.findSlot=='false'	Expr:operator.findSlot='true'};

%rule r_return_operator_returnfixture_and_lightoff DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED | Slot[idle] | Operator[idle].Fixture[idle] | $2) -> DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED | Slot[p6:edge].Fixture[p6:edge] | Operator[idle] | $2){SysClk:1	Cond:aggregator.flag==1,operator.findSlot=='true',aggregator.LEDLighten=='true'	Expr:operator.returnFixture='true',aggregator.LEDLighten='false'};

%rule r_return_operator_leave_slot DSoftSys[idle,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED | Slot[p6:edge].Fixture[p6:edge] | Operator[idle] | $2) -> DSoftSys[operate:edge,WIFI:edge].$0 | RaspberryPi[WIFI:edge,Bluetooth:edge].$1 | BLE[Bluetooth:edge].Bus.(LED | Slot[p6:edge].Fixture[p6:edge] | $2) | Operator[operate:edge]{SysClk:1	Cond:aggregator.flag==1,operator.returnFixture=='true',operator.leaveSlot=='false'	Expr:operator.leaveSlot='true'};

%rule r_return_operator_finish_operation DSoftSys[operate:edge,WIFI:edge].(WebUI.$2 | Aggregator[search:edge].$3 | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 | Operator[operate:edge] -> DSoftSys[operate:edge,WIFI:edge].(WebUI.($2 | Token) | Aggregator[search:edge].$3 | DB[search:edge]) | RaspberryPi[WIFI:edge,Bluetooth:edge].$0 | BLE[Bluetooth:edge].$1 | Operator[operate:edge]{SysClk:1	Cond:aggregator.flag==1,operator.returnFixture=='true',aggregator.LEDLighten=='false'	Expr:aggregator.flag=0,aggregator.finished='true'};

# Model
%agent ras:RaspberryPi[WIFI:edge,Bluetooth:edge].coap:CoAP_Server | ble:BLE[Bluetooth:edge].bus:Bus.(n01:LED | n02:LED | n03:LED | n04:LED | n05:LED | n06:LED | n07:LED | n08:LED | n09:LED | n10:LED | s01:Slot[p1:edge].f1:Fixture[p1:edge] | s02:Slot[p2:edge].f2:Fixture[p2:edge] | s03:Slot[p3:edge].f3:Fixture[p3:edge] | s04:Slot[p4:edge].f4:Fixture[p4:edge] | s05:Slot[p5:edge].f5:Fixture[p5:edge] | s06:Slot[idle] | s07:Slot[p7:edge].f7:Fixture[p7:edge] | s08:Slot[p8:edge].f8:Fixture[p8:edge] | s09:Slot[p9:edge].f9:Fixture[p9:edge] | s10:Slot[p10:edge].f10:Fixture[p10:edge]) | dsoftsys:DSoftSys[operate:edge,WIFI:edge].(webUI:WebUI | aggregator:Aggregator[search:edge] | db:DB[search:edge]) | operator:Operator[operate:edge].f6:Fixture[idle];

# Go!
%check;